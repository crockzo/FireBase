
#this is used to point to the data base of the connected account
FireBaseDatabase  mDataBase ;


# this used to refer the database node
DatabaseReference mRef ;


#this is to get the instance of the database
mDataBase = mDataBase.getInstance();

#this command will  give the reference of the parent/root node of the data base
mRef = mDataBase.getReference();

#this command will give the reference of the specified node
mRef = mDataBase.getReference("user!");


#to access the value of the refered node we set a listener to the node
mRef.addValueEventListener() ---> this will listen when the value is added or updated AND when the data is removed
        #with in this function we have two major function
            1. onDataChange(DataSnapshot ds);
            #this will take the snapshot of the data base node and through this we can access the value of the referenced node
                #through DataSnapshot we can read the data from the database
                ds.getValue(String.class);

            2. onCancelled(DataBaseError dbe);
            #this will invoked when the value of the node is deleted or an error is occured


#to create the reference of the child node
mRef = mDataBase.getReference("child");

#to access the value of the refered node we set a listener to the node
mRef.addValueEventListener() ---> this will listen when the value is added or updated AND when the data is removed
        #with in this function we have two major function
            1. onDataChange(DataSnapshot ds);
            #this will take the snapshot of the data base node and through this we can access the value of the referenced node
                #through DataSnapshot we can read the data from the database
                ds.getValue(String.class);

            2. onCancelled(DataBaseError dbe);
            #this will invoked when the value of the node is deleted or an error is occured


#another way to create the child is by
mRef.child("child_name");

#to access this data we use
mRed.child("child_name").addValueEventListener() -----> then same process


#to give only one listener to a specific node we use the valueEventListener
ValueEventListener mValueListener = new ValueEventListener(){....onDataChange() ..... onCancelled()....}
#to destroy this listener we destroy it in the onDestroy()
mRef.child(child_name).removeEventListener();

**PROCESS TO INSERT AND READ THE DATA **

1.  CREATE THE DATABASE OBJECT ---- FireBaseDatabase
2.  GIVE THE REFERENCE OF A NODE TO A DatabaseReference ----DataBaseReference
3.  SET VALUE TO THE REFERENCE TO THE NODE ---- mRef.setValue(); WE CAN CHECK IF THE TASK IS SUCCESSFUL OR FAILURE
4.  TO READ THE VALUE FROM THE DATABASE with specific referenced node ADD A AddValueEventListener(ValueEventListener);
5.  REMOVE THE EVENT LISTENER IN THE DESTROY BY mRef.child(child_name).removeEventListener();

------------------------------

#to create the push key
mRef.push()

#to get the reference of the generated key
String key = mRef.push().getKey().tostring();

#to create the child node explicitely
mRef.child(key).child("name").setValue("mohit gupta");



#INSERT
mRef.setValue("value");
mRef.child("child_name").setValue("value");

adding success and failure to the mRef
-
  .addOnSuccessListener(new OnSuccessListener<Void>() {
       @Override
        public void onSuccess(Void aVoid) {
           Toast.makeText(MainActivity.this, "write successfully", Toast.LENGTH_SHORT).show();
           Log.d(TAG, "onSuccess: "+"dataloaded");
                            }
                        })

  .addOnFailureListener(new OnFailureListener() {
          @Override
            public void onFailure(@NonNull Exception e) {
                Log.d(TAG, "onFailure: permission denied");
                            }
                        });

#READING DATA FROM DATABASE
add a event listener to the mRef(reference of the child in database)
take the data from the database snapshot (snapshot have the snapshot of the specified child data(key-->value))
WE CAN TAKE THE VALUE OF THE SNAPSHOT IN THE FORM OF STRING AND MAP FORMAT    ---->    snapshot.getValue(GENERIC CLASS);

 Map<String,Object> map = (Map<String, Object>) dataSnapshot.getValue();
                         String data = map.get("name").toString();

----------------------------------
#to get the content of the parent node in the form of list (Map  --> key - value)
onDataChange(databaseSnapshot ds){
    for(DatabaseSnapshot snapshot : ds.getChildren()){
        Map<String , Object> map = (Map<String , object>) snapshot.getValue();
         Log.d(TAG, "onChildAdded: key " + dataSnapshot.getKey() );
         Log.d(TAG, "onChildAdded: name " + map.get("name"));
         Log.d(TAG, "onChildAdded: age" + map.get("age"));

#to set the multi key and values of the  node at a same time
Map<String , Object > map = new HashMap<>;
map.put("/path/",value);
map.put("/path2/",value);
mRef.child("Child_id").setValues(map);



#to set a clickListener to a child in the recycler view
add the clickListener to any of the view in the recycler child view
#learned about computer vision
tommoro is my presentation on this
another day time pass had the presentation

